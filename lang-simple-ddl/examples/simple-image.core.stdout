format u16le :=
  let b0 <- byte;
  let b1 <- byte;
  #pure #Int (#int-logical-or b0 (#int-logical-shl b1 8));

format u8 := byte;

format u16be :=
  let b0 <- byte;
  let b1 <- byte;
  #pure #Int (#int-logical-or (#int-logical-shl b0 8) b1);

type pixel-record {
  blue : #Int;
  green : #Int;
  red : #Int;
}

format pixel :=
  let red <- u8;
  let green <- u8;
  let blue <- u8;
  #pure
    pixel-record
    (pixel-record { blue := blue; green := green; red := red });

type info-record {
  height : #Int;
  width : #Int;
}

format info :=
  let width <- u16be;
  let height <- u16be;
  #pure info-record (info-record { height := height; width := width });

type image-record {
  data : #List pixel-record;
  info : info-record;
}

format image :=
  let info <- info;
  let num-pixels <- #pure #Int (#int-mul info.width info.height);
  let data <- #repeat-len num-pixels pixel;
  #pure image-record (image-record { data := data; info := info });
