type Standard-timing-information {
  
}

format standard-timing-information :=
  #pure Standard-timing-information (Standard-timing-information {});

format u16le :=
  let b0 <- byte;
  let b1 <- byte;
  #pure #Int64 (#int64-bit-or b0 (#int64-bit-shl b1 8));

format u64le :=
  let b0 <- byte;
  let b1 <- byte;
  let b2 <- byte;
  let b3 <- byte;
  let b4 <- byte;
  let b5 <- byte;
  let b6 <- byte;
  let b7 <- byte;
  #pure
    #Int64
    (#int64-bit-or
       (#int64-bit-or
          (#int64-bit-or
             (#int64-bit-or
                (#int64-bit-or
                   (#int64-bit-or
                      (#int64-bit-or b0 (#int64-bit-shl b1 8))
                      (#int64-bit-shl b2 16))
                   (#int64-bit-shl b3 24))
                (#int64-bit-shl b4 32))
             (#int64-bit-shl b5 40))
          (#int64-bit-shl b6 48))
       (#int64-bit-shl b7 56));

format u8 := byte;

format u32le :=
  let b0 <- byte;
  let b1 <- byte;
  let b2 <- byte;
  let b3 <- byte;
  #pure
    #Int64
    (#int64-bit-or
       (#int64-bit-or
          (#int64-bit-or b0 (#int64-bit-shl b1 8))
          (#int64-bit-shl b2 16))
       (#int64-bit-shl b3 24));

type Chromacity-coordinates {
  blue-white-lsb : #Int64;
  blue-x-msb : #Int64;
  blue-y-msb : #Int64;
  green-x-msb : #Int64;
  green-y-msb : #Int64;
  red-green-lsb : #Int64;
  red-x-msb : #Int64;
  red-y-msb : #Int64;
  white-x-msb : #Int64;
  white-y-msb : #Int64;
}

format chromacity-coordinates :=
  let red-green-lsb <- u8;
  let blue-white-lsb <- u8;
  let red-x-msb <- u8;
  let red-y-msb <- u8;
  let green-x-msb <- u8;
  let green-y-msb <- u8;
  let blue-x-msb <- u8;
  let blue-y-msb <- u8;
  let white-x-msb <- u8;
  let white-y-msb <- u8;
  #pure
    Chromacity-coordinates
    (Chromacity-coordinates {
       blue-white-lsb := blue-white-lsb;
       blue-x-msb := blue-x-msb;
       blue-y-msb := blue-y-msb;
       green-x-msb := green-x-msb;
       green-y-msb := green-y-msb;
       red-green-lsb := red-green-lsb;
       red-x-msb := red-x-msb;
       red-y-msb := red-y-msb;
       white-x-msb := white-x-msb;
       white-y-msb := white-y-msb
     });

type Display-parameters {
  gamma-mod : #Int64;
  screen-size-h : #Int64;
  screen-size-v : #Int64;
  supported-features : #Int64;
  video-input-parameters : #Int64;
}

format display-parameters :=
  let video-input-parameters <- u8;
  let screen-size-h <- u8;
  let screen-size-v <- u8;
  let gamma-mod <- u8;
  let supported-features <- u8;
  #pure
    Display-parameters
    (Display-parameters {
       gamma-mod := gamma-mod;
       screen-size-h := screen-size-h;
       screen-size-v := screen-size-v;
       supported-features := supported-features;
       video-input-parameters := video-input-parameters
     });

type Established-timing {
  mode-bitmap : #List #Int64;
}

format established-timing :=
  let mode-bitmap <- #repeat-len 3 u8;
  #pure
    Established-timing
    (Established-timing { mode-bitmap := mode-bitmap });

type Header {
  edid-version-major : #Int64;
  edid-version-minor : #Int64;
  magic : #Int64;
  manufacturer-id : #Int64;
  manufacturer-week : #Int64;
  manufacturer-year-mod : #Int64;
  product-code : #Int64;
  serial : #Int64;
}

format header :=
  let magic <-
    let x <- u64le;
    if #int64-eq x 72057594037927680 then (#pure #Int64 x) else #fail #Int64;
  let manufacturer-id <- u16le;
  let product-code <- u16le;
  let serial <- u32le;
  let manufacturer-week <- u8;
  let manufacturer-year-mod <- u8;
  let edid-version-major <- u8;
  let edid-version-minor <- u8;
  #pure
    Header
    (Header {
       edid-version-major := edid-version-major;
       edid-version-minor := edid-version-minor;
       magic := magic;
       manufacturer-id := manufacturer-id;
       manufacturer-week := manufacturer-week;
       manufacturer-year-mod := manufacturer-year-mod;
       product-code := product-code;
       serial := serial
     });

type Main {
  chromacity-coordinates : Chromacity-coordinates;
  display-parameters : Display-parameters;
  established-timing : Established-timing;
  header : Header;
  standard-timing-information : Standard-timing-information;
}

format main :=
  let header <- header;
  let display-parameters <- display-parameters;
  let chromacity-coordinates <- chromacity-coordinates;
  let established-timing <- established-timing;
  let standard-timing-information <- standard-timing-information;
  #pure
    Main
    (Main {
       chromacity-coordinates := chromacity-coordinates;
       display-parameters := display-parameters;
       established-timing := established-timing;
       header := header;
       standard-timing-information := standard-timing-information
     });
