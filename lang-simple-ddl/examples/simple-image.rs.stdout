fn read_byte(input: &[u8], pos: &mut usize) -> Result<i64, ()> {
    let byte = input.get(*pos).ok_or(())?;
    *pos +=1;
    Ok(i64::from(*byte))
}

fn read_u16le(input: &[u8], pos: &mut usize) -> Result<i64, ()> {
    let b0 = read_byte(input, pos)?;
    let b1 = read_byte(input, pos)?;
    Ok(b0 | (b1 << 8))
}

fn read_u8(input: &[u8], pos: &mut usize) -> Result<i64, ()> {
    read_byte(input, pos)
}

fn read_u16be(input: &[u8], pos: &mut usize) -> Result<i64, ()> {
    let b0 = read_byte(input, pos)?;
    let b1 = read_byte(input, pos)?;
    Ok((b0 << 8) | b1)
}

struct Pixel {
    blue: i64,
    green: i64,
    red: i64,
}

fn read_pixel(input: &[u8], pos: &mut usize) -> Result<Pixel, ()> {
    let red = read_u8(input, pos)?;
    let green = read_u8(input, pos)?;
    let blue = read_u8(input, pos)?;
    Ok(Pixel { blue, green, red })
}

struct Info {
    height: i64,
    width: i64,
}

fn read_info(input: &[u8], pos: &mut usize) -> Result<Info, ()> {
    let width = read_u16be(input, pos)?;
    let height = read_u16be(input, pos)?;
    Ok(Info { height, width })
}

struct Image {
    data: Vec<Pixel>,
    info: Info,
}

fn read_image(input: &[u8], pos: &mut usize) -> Result<Image, ()> {
    let info = read_info(input, pos)?;
    let num_pixels: i64 = info.width * info.height;
    let data =
        (0..num_pixels)
            .map(|_| read_pixel(input, pos))
            .collect::<Result<Vec<Pixel>, _>>()?;
    Ok(Image { data, info })
}
